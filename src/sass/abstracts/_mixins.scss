// =============================================================================
// Mixins | v1.0.0
// -----------------------------------------------------------------------------
// Defines reusable SCSS mixins for the coastalskin theme
//
// This file contains logic-based helpers for generating consistent styles,
// such as media queries, typography styles, button styles, and other commonly
// used patterns. Mixins promote DRY principles and improve maintainability
// across the codebase.
// =============================================================================

// =============================================================================
// Links | v1.0.0
// -----------------------------------------------------------------------------
// Defines interaction state mixins for links and interactive elements in the
// coastalskin theme.
//
// These mixins include utility mixins for common pseudo-class states such as
// `:hover`, `:focus`, `:focus-within`, and their combinations. These mixins
// streamline the application of consistent state-based styles across
// components and reduce style duplication.

@mixin hover {
    &:hover {
        @content;
    }
}

@mixin focus {
    &:focus {
        @content;
    }
}

@mixin focus-within {
    &:focus-within {
        @content;
    }
}

@mixin hover-focus {
    &:hover,
    &:focus {
        @content;
    }
}

@mixin hover-focus-within {
    &:hover,
    &:focus-within {
        @content;
    }
}

// =============================================================================
// Flex | v1.0.0
// -----------------------------------------------------------------------------
// Provides a shorthand flexbox utility mixin for the coastalskin theme
//
// The flex mixin provides a simple common flexbox pattern such as flex
// container setup, alignment, direction, gap and wrapping. These help reduce
// verbosity in component and layout styles while maintaining readability and
// consistency.
// -----------------------------------------------------------------------------
// NOTE: Use the flex mixin when building layouts or UI components that rely on
// the flexbox model behaviour. Designed to compliment grid-based layouts where
// flexible alignment and axis control is needed.
//
// Available Params:
// - $direction:    Flex Direction (row | column | etc)
// - $justify:      Main axis alignment (e.g. flex-start, center, space-between)
// - $align:        Cross axis alignment (e.g. stretch, center, baseline)
// - $wrap:         Wrapping behaviour (e.g. wrap | nowrap)
// - $gap:          Gap between child elements (e.g. 1rem, 10ch)
// -----------------------------------------------------------------------------
// Usage:
// @include mixin.flex($justify: center, $align: center, $gap: 1rem);
// =============================================================================

@mixin flex($direction: null, $justify: null, $wrap: null, $gap: null) {
    display: flex;

    @if $direction != null {
        flex-direction: $direction;
    }

    @if $justify != null {
        justify-content: $justify;
    }

    @if $align != null {
        align-items: $align;
    }

    @if $wrap != null {
        flex-wrap: $wrap;
    }

    @if $gap != null {
        gap: $gap;
    }
}

// =============================================================================
// Grid | v1.0.0
// -----------------------------------------------------------------------------
// Provides a shorthand grid utility mixin for the coastalskin theme.
//
// The grid mixin simplifies the setup of grid containers by abstracting common
// layout properties such as column/row definitions, gap control, alignment,
// and auto-flow direction. It supports both simple and complex grid structures
// while improving readability and reducing repetition.
// -----------------------------------------------------------------------------
// NOTE: Use the grid mixin when defining layout regions or UI sections that
// require two-dimension control. Ideal for responsive grids, card layouts, or
// content blocks that benefit from flexible spatial organisation.
//
// Available Params:
// - $cols      Defines column structure
// - $rows      Defines row structure
// - $gap       Space between rows (e.g. 0.25rem)
// - $justify   Justifies content along the inline axis
// - $align     Aligns content along the block axis
// - $flow      Controls grid auto-flow (e.g. row | column | dense | etc.)
// -----------------------------------------------------------------------------
// Usage:
// @include mixin.grid($cols: 2, $rows: 1, $gap: 1rem, $justify: space-between);
// =============================================================================

@mixin grid(
    $cols: null,
    $rows: null,
    $gap: null,
    $justify: null,
    $align: null,
    $flow: null
) {
    display: grid;

    @if $cols != null {
        grid-template-columns: repeat($cols, minmax(0, 1fr));
    }

    @if $rows != null {
        grid-template-rows: repeat($rows, minmax(0, 1fr));
    }

    @if $gap != null {
        gap: $gap;
    }

    @if $justify != null {
        justify-content: $justify;
    }

    @if $align != null {
        align-items: $align;
    }

    @if $flow != null {
        grid-auto-flow: $flow;
    }
}
